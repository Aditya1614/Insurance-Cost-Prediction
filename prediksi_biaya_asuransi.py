# -*- coding: utf-8 -*-
"""Prediksi Biaya Asuransi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G5-S7Z0I5Et1PsqJT9GjliFhoxxlhG6Y

#Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""#Memuat dataset"""

url = "drive/MyDrive/dataset/insurance.csv"
asuransi = pd.read_csv(url)
asuransi

"""#Data Understanding"""

asuransi.info()

"""##Melihat Statistik dari dataset"""

asuransi.describe()

"""##Melihat apakah ada missing value"""

asuransi.isnull().sum()

"""#Exploratory data analysis (EDA)

###Visualisasi fitur numerik untuk menangani outlier
"""

sns.boxplot(x=asuransi['age'])

sns.boxplot(x=asuransi['bmi'])

sns.boxplot(x=asuransi['children'])

sns.boxplot(x=asuransi['charges'])

"""###Drop outliers 

dengan rumus:

Batas bawah = Q1 - 1.5 * IQR

Batas atas = Q3 + 1.5 * IQR
"""

Q1 = asuransi.quantile(0.25)
Q3 = asuransi.quantile(0.75)
IQR=Q3-Q1
asuransi=asuransi[~((asuransi<(Q1-1.5*IQR))|(asuransi>(Q3+1.5*IQR))).any(axis=1)]

asuransi.shape

"""##Univariate EDA"""

numerical_features = ['age', 'bmi', 'children', 'charges']
categorical_features = ['sex', 'smoker', 'region']

"""###Fitur Kategorikal

####Fitur sex
"""

feature = categorical_features[0]
count = asuransi[feature].value_counts()
percent = 100*asuransi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""####Fitur smoker"""

feature = categorical_features[1]
count = asuransi[feature].value_counts()
percent = 100*asuransi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""####Fitur region"""

feature = categorical_features[2]
count = asuransi[feature].value_counts()
percent = 100*asuransi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""###Fitur Numerik"""

asuransi.hist(bins=50, figsize=(20,15))
plt.show()

"""##Multivariate EDA

###Fitur kategorikal
"""

cat_features = asuransi.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="charges", kind="bar", dodge=False, height = 4, aspect = 3,  data=asuransi, palette="Set3")
  plt.title("Rata-rata 'charges' Relatif terhadap - {}".format(col))

"""###Fitur Numerik"""

sns.pairplot(asuransi, diag_kind = 'kde')

"""###Melihat matriks korelasi untuk fitur numerik"""

plt.figure(figsize=(10,8))
correlation_matrix = asuransi.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""###Drop fitur 'bmi' karena memiliki korelasi paling kecil"""

asuransi.drop(['bmi'], inplace=True, axis=1)
asuransi.head()

"""#Data Preparation

##One-hot-encoding
"""

from sklearn.preprocessing import  OneHotEncoder

asuransi = pd.concat([asuransi, pd.get_dummies(asuransi['sex'], prefix='sex')],axis=1)
asuransi = pd.concat([asuransi, pd.get_dummies(asuransi['smoker'], prefix='smoker')],axis=1)
asuransi = pd.concat([asuransi, pd.get_dummies(asuransi['region'], prefix='region')],axis=1)
asuransi.drop(['sex', 'smoker', 'region'], axis=1, inplace=True)
asuransi.head()

"""##Membagi data latih (train) dan data uji (test)"""

from sklearn.model_selection import train_test_split
 
X = asuransi.drop(["charges"],axis =1)
y = asuransi["charges"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total keseluruhan data: {len(X)}')
print(f'Total data latih (train): {len(X_train)}')
print(f'Total data uji (test): {len(X_test)}')

"""##Standarisasi"""

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['age', 'children']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""#Model Development"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""##KNN"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""##RandomForest"""

from sklearn.ensemble import RandomForestRegressor
 
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""##Boosting Algorithm"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""#Evaluasi Model

##Scaling fitur numerik
"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""##Evaluasi ketiga model"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""##Menguji ketiga model"""

prediksi = X_test.iloc[:3].copy()
pred_dict = {'y_true':y_test[:3]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(5)
 
pd.DataFrame(pred_dict)

"""Kesimpulannya algoritma Random Forest (RF) memberikan hasil yang paling mendekati dibanding algoritma lainnya."""